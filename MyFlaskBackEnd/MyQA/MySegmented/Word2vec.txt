Word2vec is a group of related models that are used to produce word embeddings. These models are shallow, two-layer neural networks that are trained to reconstruct linguistic contexts of words. Word2vec takes as its input a large corpus of text and produces a vector space, typically of several hundred dimensions, with each unique word in the corpus being assigned a corresponding vector in the space. Word vectors are positioned in the vector space such that words that share common contexts in the corpus are located in close proximity to one another in the space. [1]

Word2vec was created by a team of researchers led by Tomas Mikolov at Google. The algorithm has been subsequently analysed and explained by other researchers. [2][3] Embedding vectors created using the Word2vec algorithm have many advantages compared to earlier algorithms[1] such as latent semantic analysis. Contents
1	CBOW and skip grams
2	Parametrization
2.1	Training algorithm
2.2	Sub-sampling
2.3	Dimensionality
2.4	Context window
3	Extensions
4	Word vectors for bioinformatics: BioVectors
5	Word vectors for Radiology: Intelligent Word Embedding (IWE)
6	Analysis
7	Preservation of semantic and syntactic relationships
8	Assessing the quality of a model
8.1	Parameters and model quality
9	Implementations
10	See also
11	References
CBOW and skip grams
Word2vec can utilize either of two model architectures to produce a distributed representation of words: continuous bag-of-words (CBOW) or continuous skip-gram. In the continuous bag-of-words architecture, the model predicts the current word from a window of surrounding context words. The order of context words does not influence prediction (bag-of-words assumption). In the continuous skip-gram architecture, the model uses the current word to predict the surrounding window of context words. The skip-gram architecture weighs nearby context words more heavily than more distant context words. [1][4] According to the authors' note,[5] CBOW is faster while skip-gram is slower but does a better job for infrequent words. Parametrization
Results of word2vec training can be sensitive to parametrization. The following are some important parameters in word2vec training. Training algorithm
A Word2vec model can be trained with hierarchical softmax and/or negative sampling. To approximate the conditional log-likelihood a model seeks to maximize, the hierarchical softmax method uses a Huffman tree to reduce calculation. The negative sampling method, on the other hand, approaches the maximization problem by minimizing the log-likelihood of sampled negative instances. According to the authors, hierarchical softmax works better for infrequent words while negative sampling works better for frequent words and better with low dimensional vectors. [5] As training epochs increase, hierarchical softmax stops being useful. [6]

Sub-sampling
High frequency words often provide little information. Words with frequency above a certain threshold may be subsampled to increase training speed. [7]

Dimensionality
Quality of word embedding increases with higher dimensionality. But after reaching some point, marginal gain will diminish. [1] Typically, the dimensionality of the vectors is set to be between 100 and 1,000. Context window
The size of the context window determines how many words before and after a given word would be included as context words of the given word. According to the authors' note, the recommended value is 10 for skip-gram and 5 for CBOW. 